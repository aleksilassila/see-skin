// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                  String           @id @default(cuid())
  name                String
  description         String           @default("")
  brand               String           @default("")
  price               Float
  priceBeforeDiscount Float?
  priceCurrency       Currency         @default(USD)
  rating              Float?
  ratingCount         Int?
  effects             ProductEffect[]  @default([])
  category            ProductCategory?

  imageUrl            String?
  shopPageUrl         String?
  provider            ProductProvider?
  ingredientsString   String
  unknownIngredients  String[]
  knownToUnknownRatio Float

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  explicitlyAddedSkinProfiles SkinProfile[] @relation("_ExplicitlyAddedProductsToSkinProfile")
}

model Ingredient {
  id                String            @id @default(cuid())
  name              String
  cosingRef         Int               @unique
  description       String            @default("")
  function          String
  aliases           IngredientAlias[]
  ingredientClasses IngredientClass[] @default([])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  products Product[]

  explicitlyAddedSkinProfiles SkinProfile[] @relation("_ExplicitlyAddedIrritantsToSkinProfile")
  duplicateSkinProfiles       SkinProfile[] @relation("_DuplicateIrritantsToSkinProfile")
  skinTypeClassSkinProfiles   SkinProfile[] @relation("_SkinTypeClassIrritantsToSkinProfile")
  commonClassSkinProfiles     SkinProfile[] @relation("_CommonClassIrritantsToSkinProfile")
}

model IngredientAlias {
  id   String @id @default(cuid())
  name String

  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model User {
  id          String    @id @default(cuid())
  googleId    String?   @unique
  email       String
  password    String?
  name        String
  accessLevel Int       @default(0)
  logoutAt    DateTime?

  preferredProviders ProductProvider[] @default([])

  skinProfile SkinProfile?
}

model SkinProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  skinType SkinType @default(NORMAL)

  explicitlyAddedIrritants Ingredient[] @relation("_ExplicitlyAddedIrritantsToSkinProfile")
  explicitlyAddedProducts  Product[]    @relation("_ExplicitlyAddedProductsToSkinProfile")

  duplicateIrritants Ingredient[] @relation("_DuplicateIrritantsToSkinProfile")

  skinTypeClassIrritants Ingredient[] @relation("_SkinTypeClassIrritantsToSkinProfile")
  commonClassIrritants   Ingredient[] @relation("_CommonClassIrritantsToSkinProfile")
}

enum SkinType {
  NORMAL
  DRY
  OILY
  COMBINATION
  NORMAL_SENSITIVE
  DRY_SENSITIVE
  OILY_SENSITIVE
  COMBINATION_SENSITIVE
}

enum IngredientClass {
  SAFE
  PARABEN
  ALCOHOL
  SULFATE
  FUNGAL_ACNE_TRIGGER
  DRY_IRRITANT
  OILY_IRRITANT
  DRY_OILY_IRRITANT
  SENSITIVE_IRRITANT
  SINGLE_IRRITANT
}

enum Currency {
  USD
  EUR
}

enum ProductProvider {
  ULTA
  AMAZON
}

enum ProductCategory {
  MOISTURIZERS
  SUNSCREENS
  TREATMENTS
  CLEANSERS
  EYE_CREAMS
  FACE_WASHES
  EXFOLIATORS
  TONERS
  FACE_MISTS
  FACE_OILS
  SERUMS
  FACE_MASKS
  MAKEUP_REMOVERS
  LIP_CARES
}

enum ProductEffect {
  UV_PROTECTING
  ANTI_AGING
  BRIGHTENING
  ACNE_FIGHTING
  HEALING
}
